// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 06 Jan 2016 04:08:45 MSK.
// By http://git.io/cgogen. DO NOT EDIT.

package portaudio

/*
#cgo pkg-config: portaudio-2.0
#include <portaudio.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// GetVersion function as declared in portaudio/portaudio.h:57
func GetVersion() int {
	ret := C.Pa_GetVersion()
	v := (int)(ret)
	return v
}

// GetVersionText function as declared in portaudio/portaudio.h:63
func GetVersionText() string {
	ret := C.Pa_GetVersionText()
	v := packPCharString(ret)
	return v
}

// GetErrorText function as declared in portaudio/portaudio.h:110
func GetErrorText(errorCode Error) string {
	cerrorCode, _ := (C.PaError)(errorCode), cgoAllocsUnknown
	ret := C.Pa_GetErrorText(cerrorCode)
	v := packPCharString(ret)
	return v
}

// Initialize function as declared in portaudio/portaudio.h:132
func Initialize() Error {
	ret := C.Pa_Initialize()
	v := (Error)(ret)
	return v
}

// Terminate function as declared in portaudio/portaudio.h:151
func Terminate() Error {
	ret := C.Pa_Terminate()
	v := (Error)(ret)
	return v
}

// GetHostApiCount function as declared in portaudio/portaudio.h:199
func GetHostApiCount() HostApiIndex {
	ret := C.Pa_GetHostApiCount()
	v := (HostApiIndex)(ret)
	return v
}

// GetDefaultHostApi function as declared in portaudio/portaudio.h:210
func GetDefaultHostApi() HostApiIndex {
	ret := C.Pa_GetDefaultHostApi()
	v := (HostApiIndex)(ret)
	return v
}

// GetHostApiInfo function as declared in portaudio/portaudio.h:289
func GetHostApiInfo(hostApi HostApiIndex) *HostApiInfo {
	chostApi, _ := (C.PaHostApiIndex)(hostApi), cgoAllocsUnknown
	ret := C.Pa_GetHostApiInfo(chostApi)
	v := NewHostApiInfoRef(ret)
	return v
}

// HostApiTypeIdToHostApiIndex function as declared in portaudio/portaudio.h:307
func HostApiTypeIdToHostApiIndex(kind HostApiTypeId) HostApiIndex {
	ckind, _ := (C.PaHostApiTypeId)(kind), cgoAllocsUnknown
	ret := C.Pa_HostApiTypeIdToHostApiIndex(ckind)
	v := (HostApiIndex)(ret)
	return v
}

// HostApiDeviceIndexToDeviceIndex function as declared in portaudio/portaudio.h:331
func HostApiDeviceIndexToDeviceIndex(hostApi HostApiIndex, hostApiDeviceIndex int) DeviceIndex {
	chostApi, _ := (C.PaHostApiIndex)(hostApi), cgoAllocsUnknown
	chostApiDeviceIndex, _ := (C.int)(hostApiDeviceIndex), cgoAllocsUnknown
	ret := C.Pa_HostApiDeviceIndexToDeviceIndex(chostApi, chostApiDeviceIndex)
	v := (DeviceIndex)(ret)
	return v
}

// GetLastHostErrorInfo function as declared in portaudio/portaudio.h:358
func GetLastHostErrorInfo() *HostErrorInfo {
	ret := C.Pa_GetLastHostErrorInfo()
	v := NewHostErrorInfoRef(ret)
	return v
}

// GetDeviceCount function as declared in portaudio/portaudio.h:371
func GetDeviceCount() DeviceIndex {
	ret := C.Pa_GetDeviceCount()
	v := (DeviceIndex)(ret)
	return v
}

// GetDefaultInputDevice function as declared in portaudio/portaudio.h:380
func GetDefaultInputDevice() DeviceIndex {
	ret := C.Pa_GetDefaultInputDevice()
	v := (DeviceIndex)(ret)
	return v
}

// GetDefaultOutputDevice function as declared in portaudio/portaudio.h:398
func GetDefaultOutputDevice() DeviceIndex {
	ret := C.Pa_GetDefaultOutputDevice()
	v := (DeviceIndex)(ret)
	return v
}

// GetDeviceInfo function as declared in portaudio/portaudio.h:482
func GetDeviceInfo(device DeviceIndex) *DeviceInfo {
	cdevice, _ := (C.PaDeviceIndex)(device), cgoAllocsUnknown
	ret := C.Pa_GetDeviceInfo(cdevice)
	v := NewDeviceInfoRef(ret)
	return v
}

// IsFormatSupported function as declared in portaudio/portaudio.h:558
func IsFormatSupported(inputParameters *StreamParameters, outputParameters *StreamParameters, sampleRate float64) Error {
	cinputParameters, _ := inputParameters.PassRef()
	coutputParameters, _ := outputParameters.PassRef()
	csampleRate, _ := (C.double)(sampleRate), cgoAllocsUnknown
	ret := C.Pa_IsFormatSupported(cinputParameters, coutputParameters, csampleRate)
	v := (Error)(ret)
	return v
}

// OpenStream function as declared in portaudio/portaudio.h:841
func OpenStream(stream **Stream, inputParameters *StreamParameters, outputParameters *StreamParameters, sampleRate float64, framesPerBuffer uint, streamFlags StreamFlags, streamCallback StreamCallback, userData unsafe.Pointer) Error {
	cstream, _ := (*unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cinputParameters, _ := inputParameters.PassRef()
	coutputParameters, _ := outputParameters.PassRef()
	csampleRate, _ := (C.double)(sampleRate), cgoAllocsUnknown
	cframesPerBuffer, _ := (C.ulong)(framesPerBuffer), cgoAllocsUnknown
	cstreamFlags, _ := (C.PaStreamFlags)(streamFlags), cgoAllocsUnknown
	cstreamCallback, _ := streamCallback.PassRef()
	cuserData, _ := (unsafe.Pointer)(unsafe.Pointer(userData)), cgoAllocsUnknown
	ret := C.Pa_OpenStream(cstream, cinputParameters, coutputParameters, csampleRate, cframesPerBuffer, cstreamFlags, cstreamCallback, cuserData)
	v := (Error)(ret)
	return v
}

// OpenDefaultStream function as declared in portaudio/portaudio.h:881
func OpenDefaultStream(stream **Stream, numInputChannels int, numOutputChannels int, sampleFormat SampleFormat, sampleRate float64, framesPerBuffer uint, streamCallback StreamCallback, userData unsafe.Pointer) Error {
	cstream, _ := (*unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cnumInputChannels, _ := (C.int)(numInputChannels), cgoAllocsUnknown
	cnumOutputChannels, _ := (C.int)(numOutputChannels), cgoAllocsUnknown
	csampleFormat, _ := (C.PaSampleFormat)(sampleFormat), cgoAllocsUnknown
	csampleRate, _ := (C.double)(sampleRate), cgoAllocsUnknown
	cframesPerBuffer, _ := (C.ulong)(framesPerBuffer), cgoAllocsUnknown
	cstreamCallback, _ := streamCallback.PassRef()
	cuserData, _ := (unsafe.Pointer)(unsafe.Pointer(userData)), cgoAllocsUnknown
	ret := C.Pa_OpenDefaultStream(cstream, cnumInputChannels, cnumOutputChannels, csampleFormat, csampleRate, cframesPerBuffer, cstreamCallback, cuserData)
	v := (Error)(ret)
	return v
}

// CloseStream function as declared in portaudio/portaudio.h:894
func CloseStream(stream *Stream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_CloseStream(cstream)
	v := (Error)(ret)
	return v
}

// SetStreamFinishedCallback function as declared in portaudio/portaudio.h:932
func SetStreamFinishedCallback(stream *Stream, streamFinishedCallback StreamFinishedCallback) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cstreamFinishedCallback, _ := streamFinishedCallback.PassRef()
	ret := C.Pa_SetStreamFinishedCallback(cstream, cstreamFinishedCallback)
	v := (Error)(ret)
	return v
}

// StartStream function as declared in portaudio/portaudio.h:937
func StartStream(stream *Stream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_StartStream(cstream)
	v := (Error)(ret)
	return v
}

// StopStream function as declared in portaudio/portaudio.h:943
func StopStream(stream *Stream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_StopStream(cstream)
	v := (Error)(ret)
	return v
}

// AbortStream function as declared in portaudio/portaudio.h:949
func AbortStream(stream *Stream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_AbortStream(cstream)
	v := (Error)(ret)
	return v
}

// IsStreamStopped function as declared in portaudio/portaudio.h:964
func IsStreamStopped(stream *Stream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_IsStreamStopped(cstream)
	v := (Error)(ret)
	return v
}

// IsStreamActive function as declared in portaudio/portaudio.h:980
func IsStreamActive(stream *Stream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_IsStreamActive(cstream)
	v := (Error)(ret)
	return v
}

// GetStreamInfo function as declared in portaudio/portaudio.h:1034
func GetStreamInfo(stream *Stream) *StreamInfo {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_GetStreamInfo(cstream)
	v := NewStreamInfoRef(ret)
	return v
}

// GetStreamTime function as declared in portaudio/portaudio.h:1052
func GetStreamTime(stream *Stream) Time {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_GetStreamTime(cstream)
	v := (Time)(ret)
	return v
}

// GetStreamCpuLoad function as declared in portaudio/portaudio.h:1071
func GetStreamCpuLoad(stream *Stream) float64 {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_GetStreamCpuLoad(cstream)
	v := (float64)(ret)
	return v
}

// ReadStream function as declared in portaudio/portaudio.h:1095
func ReadStream(stream *Stream, buffer unsafe.Pointer, frames uint) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cbuffer, _ := (unsafe.Pointer)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	cframes, _ := (C.ulong)(frames), cgoAllocsUnknown
	ret := C.Pa_ReadStream(cstream, cbuffer, cframes)
	v := (Error)(ret)
	return v
}

// WriteStream function as declared in portaudio/portaudio.h:1122
func WriteStream(stream *Stream, buffer unsafe.Pointer, frames uint) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cbuffer, _ := (unsafe.Pointer)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	cframes, _ := (C.ulong)(frames), cgoAllocsUnknown
	ret := C.Pa_WriteStream(cstream, cbuffer, cframes)
	v := (Error)(ret)
	return v
}

// GetStreamReadAvailable function as declared in portaudio/portaudio.h:1135
func GetStreamReadAvailable(stream *Stream) int {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_GetStreamReadAvailable(cstream)
	v := (int)(ret)
	return v
}

// GetStreamWriteAvailable function as declared in portaudio/portaudio.h:1146
func GetStreamWriteAvailable(stream *Stream) int {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	ret := C.Pa_GetStreamWriteAvailable(cstream)
	v := (int)(ret)
	return v
}

// GetSampleSize function as declared in portaudio/portaudio.h:1157
func GetSampleSize(format SampleFormat) Error {
	cformat, _ := (C.PaSampleFormat)(format), cgoAllocsUnknown
	ret := C.Pa_GetSampleSize(cformat)
	v := (Error)(ret)
	return v
}

// Sleep function as declared in portaudio/portaudio.h:1167
func Sleep(msec int) {
	cmsec, _ := (C.long)(msec), cgoAllocsUnknown
	C.Pa_Sleep(cmsec)
}
